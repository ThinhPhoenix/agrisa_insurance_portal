import {
    DeleteOutlined,
    DownloadOutlined,
    DragOutlined,
    EditOutlined,
    EyeInvisibleOutlined,
    EyeOutlined,
    FileTextOutlined,
    FullscreenOutlined,
    InfoCircleOutlined,
    PlusOutlined,
    PrinterOutlined,
    TagOutlined
} from '@ant-design/icons';
import { DragDropContext, Draggable, Droppable } from '@hello-pangea/dnd';
import {
    Alert,
    Button,
    Card,
    Checkbox,
    Col,
    DatePicker,
    Form,
    Input,
    InputNumber,
    Modal,
    Popconfirm,
    Row,
    Select,
    Space,
    Table,
    TimePicker,
    Tooltip,
    Typography
} from 'antd';
import React from 'react';
import ContractPreview from '../ContractPreview';

const { Option } = Select;
const { Title, Text } = Typography;

const TagsTab = ({
    tagsData,
    mockData,
    onDataChange,
    onAddTag,
    onRemoveTag,
    onUpdateTag,
    previewVisible = true,
    onPreviewVisibleChange
}) => {
    const [tagForm] = Form.useForm();
    const [selectedDataType, setSelectedDataType] = React.useState('string');
    const [selectOptions, setSelectOptions] = React.useState(['']);
    const [isMultipleSelect, setIsMultipleSelect] = React.useState(false);
    const [editingRows, setEditingRows] = React.useState(new Set()); // Track which rows are in edit mode
    const [previewFullscreen, setPreviewFullscreen] = React.useState(false); // Fullscreen preview mode
    const [fieldWidth, setFieldWidth] = React.useState(40); // Field width percentage for layout (default 40% = 2 fields/row)
    const [textareaRows, setTextareaRows] = React.useState(3); // Number of rows for textarea

    // Handle data type change
    const handleDataTypeChange = (value) => {
        setSelectedDataType(value);
        // Reset value when data type changes
        tagForm.setFieldsValue({ value: '' });

        if (value === 'select') {
            setSelectOptions(['']);
            setIsMultipleSelect(false);
        }

        // Textarea always uses 100% width
        if (value === 'textarea') {
            setFieldWidth(100);
            setTextareaRows(3); // Default 3 rows
        } else if (fieldWidth === 100 && value !== 'textarea') {
            // Reset to default when changing from textarea
            setFieldWidth(40);
        }
    };

    // Handle select options change
    const handleOptionChange = (index, value) => {
        const newOptions = [...selectOptions];
        newOptions[index] = value;
        setSelectOptions(newOptions);
        // Reset value to ensure no auto-selection
        tagForm.setFieldsValue({ value: '' });
    };

    // Add new option
    const addOption = () => {
        setSelectOptions([...selectOptions, '']);
        // Reset value to ensure no auto-selection
        tagForm.setFieldsValue({ value: '' });
    };

    // Remove option
    const removeOption = (index) => {
        if (selectOptions.length > 1) {
            const newOptions = selectOptions.filter((_, i) => i !== index);
            setSelectOptions(newOptions);
        }
    };

    // Handle multiple select toggle
    const handleMultipleSelectChange = (checked) => {
        setIsMultipleSelect(checked);
        tagForm.setFieldsValue({ value: '' });
    };

    // Toggle edit mode for a row
    const toggleEditMode = (recordId) => {
        setEditingRows(prev => {
            const newSet = new Set(prev);
            if (newSet.has(recordId)) {
                newSet.delete(recordId);
            } else {
                newSet.add(recordId);
            }
            return newSet;
        });
    };

    // Handle drag and drop
    const handleDragEnd = (result) => {
        if (!result.destination) {
            return;
        }

        const items = Array.from(tagsData.tags);
        const [reorderedItem] = items.splice(result.source.index, 1);
        items.splice(result.destination.index, 0, reorderedItem);

        // Update index for all items
        const updatedItems = items.map((item, index) => ({
            ...item,
            index: index + 1
        }));

        // Update the tags data
        onDataChange({
            ...tagsData,
            tags: updatedItems
        });

        // Reset edit mode after drag and drop
        setEditingRows(new Set());
    };

    // Render value input based on data type
    const renderValueInput = () => {
        switch (selectedDataType) {
            case 'integer':
                return (
                    <InputNumber
                        placeholder="Nh·∫≠p s·ªë nguy√™n"
                        size="large"
                        style={{ width: '100%' }}
                    />
                );
            case 'decimal':
                return (
                    <InputNumber
                        step="0.01"
                        placeholder="Nh·∫≠p s·ªë th·∫≠p ph√¢n"
                        size="large"
                        style={{ width: '100%' }}
                    />
                );
            case 'boolean':
                return (
                    <Select
                        placeholder="Ch·ªçn gi√° tr·ªã"
                        size="large"
                        allowClear
                    >
                        <Option value="true">C√≥ / ƒê√∫ng</Option>
                        <Option value="false">Kh√¥ng / Sai</Option>
                    </Select>
                );
            case 'date':
                return (
                    <DatePicker
                        placeholder="Ch·ªçn ng√†y"
                        size="large"
                        style={{ width: '100%' }}
                        format="DD/MM/YYYY"
                    />
                );
            case 'time':
                return (
                    <TimePicker
                        placeholder="Ch·ªçn gi·ªù"
                        size="large"
                        style={{ width: '100%' }}
                        format="HH:mm"
                    />
                );
            case 'datetime':
                return (
                    <DatePicker
                        showTime
                        placeholder="Ch·ªçn ng√†y gi·ªù"
                        size="large"
                        style={{ width: '100%' }}
                        format="DD/MM/YYYY HH:mm"
                    />
                );
            case 'select':
                return (
                    <div>
                        <div style={{ marginBottom: 8 }}>
                            <Checkbox
                                checked={isMultipleSelect}
                                onChange={(e) => handleMultipleSelectChange(e.target.checked)}
                            >
                                Cho ph√©p ch·ªçn nhi·ªÅu gi√° tr·ªã
                            </Checkbox>
                        </div>

                        <div style={{ marginBottom: 8 }}>
                            <Text strong style={{ fontSize: '12px' }}>C√°c t√πy ch·ªçn:</Text>
                        </div>

                        {selectOptions.map((option, index) => (
                            <div key={index} style={{ display: 'flex', alignItems: 'center', marginBottom: 4 }}>
                                <Input
                                    value={option}
                                    onChange={(e) => handleOptionChange(index, e.target.value)}
                                    placeholder={`T√πy ch·ªçn ${index + 1}`}
                                    size="small"
                                    style={{ flex: 1, marginRight: 8 }}
                                />
                                {selectOptions.length > 1 && (
                                    <Button
                                        type="text"
                                        danger
                                        icon={<DeleteOutlined />}
                                        onClick={() => removeOption(index)}
                                        size="small"
                                    />
                                )}
                            </div>
                        ))}

                        <Button
                            type="dashed"
                            onClick={addOption}
                            icon={<PlusOutlined />}
                            size="small"
                            style={{ marginTop: 4 }}
                        >
                            Th√™m t√πy ch·ªçn
                        </Button>

                        <div style={{ marginTop: 8, fontSize: '12px', color: '#666' }}>
                            üí° Gi√° tr·ªã s·∫Ω ƒë·ªÉ tr·ªëng khi t·∫°o tag m·ªõi. Ng∆∞·ªùi d√πng c√≥ th·ªÉ ch·ªçn t·ª´ c√°c t√πy ch·ªçn ƒë√£ ƒë·ªãnh nghƒ©a.
                        </div>
                    </div>
                );
            case 'textarea':
                return (
                    <div>
                        <Input.TextArea
                            placeholder="Nh·∫≠p n·ªôi dung vƒÉn b·∫£n d√†i (c√≥ th·ªÉ nhi·ªÅu d√≤ng)"
                            rows={4}
                            size="large"
                            showCount
                            maxLength={500}
                            style={{ marginBottom: 8 }}
                        />
                        <div style={{ marginTop: 8 }}>
                            <Text strong style={{ fontSize: '12px' }}>S·ªë d√≤ng hi·ªÉn th·ªã tr√™n h·ª£p ƒë·ªìng:</Text>
                        </div>
                        <InputNumber
                            min={1}
                            max={10}
                            value={textareaRows}
                            onChange={(value) => setTextareaRows(value || 3)}
                            size="small"
                            style={{ width: 100, marginTop: 4 }}
                            addonAfter="d√≤ng"
                        />
                        <Text type="secondary" style={{ fontSize: '11px', display: 'block', marginTop: 4 }}>
                            üí° Textarea lu√¥n chi·∫øm full width (100%) tr√™n h·ª£p ƒë·ªìng
                        </Text>
                    </div>
                );
            case 'string':
            default:
                return (
                    <Input
                        placeholder="Nh·∫≠p gi√° tr·ªã ban ƒë·∫ßu"
                        size="large"
                    />
                );
        }
    };

    // Get validation rules based on data type - All optional now
    const getValueValidationRules = () => {
        return []; // No validation - all fields optional
    };    // Handle add tag
    const handleAddTag = () => {
        tagForm.validateFields().then(values => {
            // Check if key already exists
            const exists = tagsData.tags.find(tag => tag.key === values.key);
            if (exists) {
                tagForm.setFields([{
                    name: 'key',
                    errors: ['T√™n tr∆∞·ªùng n√†y ƒë√£ t·ªìn t·∫°i']
                }]);
                return;
            }

            // Additional validation based on data type - Allow empty values
            let processedValue = values.value;
            switch (values.dataType) {
                case 'integer':
                    // Allow empty values
                    if (values.value !== undefined && values.value !== null && values.value !== '') {
                        processedValue = parseInt(values.value, 10);
                        if (isNaN(processedValue)) {
                            processedValue = ''; // Set to empty if invalid
                        }
                    } else {
                        processedValue = '';
                    }
                    break;
                case 'decimal':
                    // Allow empty values
                    if (values.value !== undefined && values.value !== null && values.value !== '') {
                        processedValue = parseFloat(values.value);
                        if (isNaN(processedValue)) {
                            processedValue = ''; // Set to empty if invalid
                        }
                    } else {
                        processedValue = '';
                    }
                    break;
                case 'boolean':
                    processedValue = values.value === 'true';
                    break;
                case 'select':
                    // For select, always leave value empty - user will select later
                    processedValue = '';
                    // Only validate options if user is trying to use select type
                    const validOptions = selectOptions.filter(opt => opt.trim() !== '');
                    if (validOptions.length < 2) {
                        tagForm.setFields([{
                            name: 'value',
                            errors: ['Ph·∫£i c√≥ √≠t nh·∫•t 2 t√πy ch·ªçn h·ª£p l·ªá']
                        }]);
                        return;
                    }
                    break;
                case 'string':
                default:
                    processedValue = values.value ? String(values.value) : '';
                    break;
            }

            const dataType = mockData.tagDataTypes.find(type => type.value === values.dataType);

            // Handle date/time types - convert to display string
            let displayValue = processedValue;
            if (values.dataType === 'date' && values.value) {
                displayValue = values.value.format('DD/MM/YYYY');
            } else if (values.dataType === 'time' && values.value) {
                displayValue = values.value.format('HH:mm');
            } else if (values.dataType === 'datetime' && values.value) {
                displayValue = values.value.format('DD/MM/YYYY HH:mm');
            }

            const tag = {
                ...values,
                value: displayValue || '',
                options: values.dataType === 'select' ? selectOptions.filter(opt => opt.trim() !== '') : undefined,
                isMultipleSelect: values.dataType === 'select' ? isMultipleSelect : undefined,
                rows: values.dataType === 'textarea' ? textareaRows : undefined, // Number of rows for textarea
                index: tagsData.tags.length + 1, // Auto increment index
                dataTypeLabel: dataType?.label || '',
                width: fieldWidth // Layout configuration (textarea always 100%)
            };

            onAddTag(tag);
            tagForm.resetFields();
            setSelectedDataType('string'); // Reset to default
            setSelectOptions(['']); // Reset options
            setIsMultipleSelect(false); // Reset multiple select
            setTextareaRows(3); // Reset rows
            setFieldWidth(40); // Reset width to default 40%
        });
    };

    // Handle inline edit
    const handleCellEdit = (record, field, value) => {
        // Only allow editing if row is in edit mode
        if (!editingRows.has(record.id)) {
            return;
        }

        let processedValue = value;

        if (field === 'value') {
            // Validate and process value based on data type
            switch (record.dataType) {
                case 'integer':
                    processedValue = parseInt(value, 10);
                    if (isNaN(processedValue) && value !== '') {
                        // Reset to original value if invalid
                        return;
                    }
                    break;
                case 'decimal':
                    processedValue = parseFloat(value);
                    if (isNaN(processedValue) && value !== '') {
                        // Reset to original value if invalid
                        return;
                    }
                    break;
                case 'boolean':
                    processedValue = value === 'true';
                    break;
                case 'string':
                default:
                    processedValue = String(value);
                    break;
            }
        }

        if (field === 'dataType') {
            const dataType = mockData.tagDataTypes.find(type => type.value === value);
            onUpdateTag(record.id, {
                [field]: value,
                dataTypeLabel: dataType?.label || ''
            });
        } else if (field !== 'index') { // Don't allow editing index
            onUpdateTag(record.id, { [field]: processedValue });
        }
    };

    // Tags table columns with inline editing
    const tagsColumns = [
        {
            title: 'STT',
            dataIndex: 'index',
            key: 'index',
            width: '6%',
            render: (text) => (
                <Text strong style={{ textAlign: 'center', display: 'block' }}>
                    {text}
                </Text>
            ),
        },
        {
            title: 'T√™n tr∆∞·ªùng',
            dataIndex: 'key',
            key: 'key',
            width: '22%',
            render: (text, record) => {
                const isEditing = editingRows.has(record.id);
                if (isEditing) {
                    return (
                        <Input
                            value={text}
                            onChange={(e) => handleCellEdit(record, 'key', e.target.value)}
                            onBlur={(e) => {
                                // Validate key format
                                const value = e.target.value.trim();
                                if (value && !/^[a-zA-Z][a-zA-Z0-9_]*$/.test(value)) {
                                    onUpdateTag(record.id, { key: record.key }); // Reset to original
                                }
                            }}
                            placeholder="Nh·∫≠p t√™n tr∆∞·ªùng"
                            size="small"
                        />
                    );
                }
                return <Text strong>{text}</Text>;
            },
        },
        {
            title: 'Gi√° tr·ªã (Value)',
            dataIndex: 'value',
            key: 'value',
            width: '30%',
            render: (text, record) => {
                const isEditing = editingRows.has(record.id);
                if (isEditing) {
                    switch (record.dataType) {
                        case 'integer':
                            return (
                                <Input
                                    type="number"
                                    step="1"
                                    value={text}
                                    onChange={(e) => handleCellEdit(record, 'value', e.target.value)}
                                    placeholder="Nh·∫≠p s·ªë nguy√™n"
                                    size="small"
                                />
                            );
                        case 'decimal':
                            return (
                                <Input
                                    type="number"
                                    step="0.01"
                                    value={text}
                                    onChange={(e) => handleCellEdit(record, 'value', e.target.value)}
                                    placeholder="Nh·∫≠p s·ªë th·∫≠p ph√¢n"
                                    size="small"
                                />
                            );
                        case 'boolean':
                            return (
                                <Select
                                    value={text}
                                    onChange={(value) => handleCellEdit(record, 'value', value)}
                                    size="small"
                                    style={{ width: '100%' }}
                                >
                                    <Option value="true">True</Option>
                                    <Option value="false">False</Option>
                                </Select>
                            );
                        case 'select':
                            return (
                                <Select
                                    value={text}
                                    onChange={(value) => handleCellEdit(record, 'value', value)}
                                    mode={record.isMultipleSelect ? 'multiple' : undefined}
                                    size="small"
                                    style={{ width: '100%' }}
                                >
                                    {record.options?.map((option, index) => (
                                        <Option key={index} value={option}>
                                            {option}
                                        </Option>
                                    ))}
                                </Select>
                            );
                        case 'string':
                        default:
                            return (
                                <Input
                                    value={text}
                                    onChange={(e) => handleCellEdit(record, 'value', e.target.value)}
                                    placeholder="Nh·∫≠p gi√° tr·ªã"
                                    size="small"
                                />
                            );
                    }
                }
                return <Text>{text}</Text>;
            },
        },
        {
            title: 'Lo·∫°i d·ªØ li·ªáu',
            dataIndex: 'dataType',
            key: 'dataType',
            width: '30%',
            render: (value, record) => {
                const isEditing = editingRows.has(record.id);
                if (isEditing) {
                    return (
                        <Select
                            value={value}
                            onChange={(newValue) => handleCellEdit(record, 'dataType', newValue)}
                            size="small"
                            style={{ width: '100%' }}
                        >
                            {mockData.tagDataTypes.map(type => (
                                <Option key={type.value} value={type.value}>
                                    {type.label}
                                </Option>
                            ))}
                        </Select>
                    );
                }
                return <Text type="secondary" style={{ fontSize: '12px' }}>{record.dataTypeLabel}</Text>;
            },
        },
        {
            title: 'H√†nh ƒë·ªông',
            key: 'action',
            fixed: 'right',
            width: 150,
            render: (_, record) => {
                const isEditing = editingRows.has(record.id);
                return (
                    <div className="flex gap-2">
                        <div className="drag-handle">
                            <DragOutlined
                                style={{ color: '#999', cursor: 'grab', fontSize: '14px' }}
                                title="K√©o th·∫£ ƒë·ªÉ thay ƒë·ªïi th·ª© t·ª±"
                            />
                        </div>
                        <Button
                            type="dashed"
                            size="small"
                            className="!bg-orange-100 !border-orange-200 !text-orange-800 hover:!bg-orange-200"
                            onClick={() => toggleEditMode(record.id)}
                            title={isEditing ? 'Ch·∫ø ƒë·ªô xem' : 'Ch·∫ø ƒë·ªô ch·ªânh s·ª≠a'}
                        >
                            <EditOutlined size={14} />
                        </Button>
                        <Popconfirm
                            title="X√≥a tag"
                            description="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a tag n√†y?"
                            onConfirm={() => onRemoveTag(record.id)}
                            okText="X√≥a"
                            cancelText="H·ªßy"
                        >
                            <Button
                                type="dashed"
                                size="small"
                                className="!bg-red-100 !border-red-200 !text-red-800 hover:!bg-red-200"
                                title="X√≥a"
                            >
                                <DeleteOutlined size={14} />
                            </Button>
                        </Popconfirm>
                    </div>
                );
            },
        },
    ];

    // Load default tags
    const handleLoadDefaults = () => {
        mockData.sampleData.defaultTags.forEach(defaultTag => {
            const exists = tagsData.tags.find(tag => tag.key === defaultTag.key);
            if (!exists) {
                const dataType = mockData.tagDataTypes.find(type => type.value === defaultTag.dataType);
                onAddTag({
                    ...defaultTag,
                    dataTypeLabel: dataType?.label || ''
                });
            }
        });
    };

    return (
        <div className="tags-tab" style={{ position: 'relative', minHeight: '100%' }}>
            {/* Main Content */}
            <div style={{
                width: '100%',
                minHeight: '100vh'
            }}>
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px', flexWrap: 'wrap', gap: '12px' }}>
                    <Title level={4} style={{ margin: 0 }}>
                        <TagOutlined /> G·∫Øn th·∫ª & Metadata
                    </Title>
                    <Space wrap>
                        <Button
                            type="default"
                            icon={<FullscreenOutlined />}
                            onClick={() => setPreviewFullscreen(true)}
                        >
                            Xem to√†n m√†n h√¨nh
                        </Button>
                        <Button
                            type={previewVisible ? 'primary' : 'default'}
                            icon={previewVisible ? <EyeInvisibleOutlined /> : <EyeOutlined />}
                            onClick={() => onPreviewVisibleChange && onPreviewVisibleChange(!previewVisible)}
                        >
                            {previewVisible ? '·∫®n xem tr∆∞·ªõc' : 'Hi·ªán xem tr∆∞·ªõc'}
                        </Button>
                    </Space>
                </div>

                <Alert
                    message="C·∫•u h√¨nh tr∆∞·ªùng th√¥ng tin cho h·ª£p ƒë·ªìng"
                    description="Th√™m c√°c tr∆∞·ªùng th√¥ng tin ƒë·ªÉ t·∫°o m·∫´u h·ª£p ƒë·ªìng b·∫£o hi·ªÉm. C√°c tr∆∞·ªùng n√†y s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n h·ª£p ƒë·ªìng PDF theo th·ª© t·ª± v√† ƒë·ªô r·ªông b·∫°n c·∫•u h√¨nh. Xem tr∆∞·ªõc realtime ·ªü b√™n ph·∫£i."
                    type="info"
                    showIcon
                    style={{ marginBottom: 24 }}
                />

                {/* Add Tag Form */}
                <Card className="add-tag-card">
                    <Title level={5}>Th√™m Tag M·ªõi</Title>

                    <Form
                        form={tagForm}
                        layout="vertical"
                        className="tag-form"
                    >
                        <Row gutter={16} align="middle">
                            <Col span={12}>
                                <Form.Item
                                    name="key"
                                    label="T√™n tr∆∞·ªùng (Key)"
                                    rules={[
                                        { required: true, message: 'Vui l√≤ng nh·∫≠p t√™n tr∆∞·ªùng' }
                                    ]}
                                >
                                    <Input
                                        placeholder="VD: H·ªç v√† t√™n, Ng√†y sinh, ƒê·ªãa ch·ªâ"
                                        size="large"
                                    />
                                </Form.Item>
                            </Col>

                            <Col span={12}>
                                <Form.Item
                                    name="dataType"
                                    label="Lo·∫°i d·ªØ li·ªáu"
                                    rules={[{ required: true, message: 'Ch·ªçn lo·∫°i d·ªØ li·ªáu' }]}
                                >
                                    <Select
                                        placeholder="Ch·ªçn lo·∫°i"
                                        size="large"
                                        optionLabelProp="label"
                                        dropdownStyle={{ maxWidth: '350px' }}
                                        onChange={handleDataTypeChange}
                                    >
                                        {mockData.tagDataTypes.map(type => (
                                            <Option key={type.value} value={type.value} label={type.label}>
                                                <Tooltip
                                                    title={
                                                        <div>
                                                            <div><strong>{type.label}</strong></div>
                                                            <div style={{ marginTop: '4px' }}>{type.description}</div>
                                                        </div>
                                                    }
                                                    placement="right"
                                                    mouseEnterDelay={0.3}
                                                >
                                                    <div style={{
                                                        maxWidth: '330px',
                                                        cursor: 'pointer'
                                                    }}
                                                        className="option-hover-item"
                                                    >
                                                        <Text style={{
                                                            fontSize: '13px',
                                                            display: 'block',
                                                            whiteSpace: 'nowrap',
                                                            overflow: 'hidden',
                                                            textOverflow: 'ellipsis'
                                                        }}>
                                                            {type.label}
                                                        </Text>
                                                        <Text type="secondary" style={{
                                                            fontSize: '11px',
                                                            display: 'block',
                                                            whiteSpace: 'nowrap',
                                                            overflow: 'hidden',
                                                            textOverflow: 'ellipsis'
                                                        }}>
                                                            {type.description}
                                                        </Text>
                                                    </div>
                                                </Tooltip>
                                            </Option>
                                        ))}
                                    </Select>
                                </Form.Item>
                            </Col>
                        </Row>

                        <Row gutter={16}>
                            <Col span={24}>
                                <Form.Item>
                                    <Button
                                        type="primary"
                                        icon={<PlusOutlined />}
                                        onClick={handleAddTag}
                                        size="large"
                                        block
                                        style={{ height: '48px', fontSize: '15px' }}
                                    >
                                        Th√™m
                                    </Button>
                                </Form.Item>
                            </Col>
                        </Row>
                    </Form>
                </Card>

                {/* Tags Table */}
                {tagsData.tags.length === 0 ? (
                    <Alert
                        message="Ch∆∞a c√≥ tag n√†o ƒë∆∞·ª£c t·∫°o"
                        description="Tags l√† t√πy ch·ªçn, b·∫°n c√≥ th·ªÉ b·ªè qua ho·∫∑c th√™m c√°c th√¥ng tin metadata ƒë·ªÉ h·ªó tr·ª£ qu·∫£n l√Ω policy"
                        type="info"
                        icon={<InfoCircleOutlined />}
                        className="no-tags-alert"
                        style={{ marginTop: 16 }}
                    />
                ) : (
                    <Card title="Danh s√°ch Tags" style={{ marginTop: 16 }}>
                        <DragDropContext onDragEnd={handleDragEnd}>
                            <Droppable droppableId="tags-table">
                                {(provided) => (
                                    <div {...provided.droppableProps} ref={provided.innerRef}>
                                        <Table
                                            columns={tagsColumns}
                                            dataSource={tagsData.tags}
                                            rowKey="id"
                                            pagination={false}
                                            className="tags-table"
                                            size="middle"
                                            components={{
                                                body: {
                                                    row: ({ children, ...props }) => (
                                                        <Draggable
                                                            draggableId={props['data-row-key'].toString()}
                                                            index={props.index}
                                                        >
                                                            {(provided, snapshot) => (
                                                                <tr
                                                                    {...props}
                                                                    ref={provided.innerRef}
                                                                    {...provided.draggableProps}
                                                                    {...provided.dragHandleProps}
                                                                    style={{
                                                                        ...provided.draggableProps.style,
                                                                        backgroundColor: snapshot.isDragging ? '#fafafa' : 'transparent',
                                                                    }}
                                                                >
                                                                    {children}
                                                                </tr>
                                                            )}
                                                        </Draggable>
                                                    ),
                                                },
                                            }}
                                            onRow={(record, index) => ({
                                                index,
                                                'data-row-key': record.id,
                                            })}
                                        />
                                        {provided.placeholder}
                                    </div>
                                )}
                            </Droppable>
                        </DragDropContext>

                        <div style={{ marginTop: 16 }}>
                            <Text type="secondary">
                                T·ªïng c·ªông: <Text strong>{tagsData.tags.length}</Text> tags
                            </Text>
                            <br />
                            <Text type="secondary" style={{ fontSize: '12px' }}>
                                üí° K√©o th·∫£ icon <DragOutlined /> ƒë·ªÉ thay ƒë·ªïi th·ª© t·ª± ‚Ä¢ Nh·∫•n <EditOutlined /> ƒë·ªÉ ch·ªânh s·ª≠a
                            </Text>
                        </div>
                    </Card>
                )}
            </div>

            {/* Fullscreen Preview Modal */}
            <Modal
                open={previewFullscreen}
                onCancel={() => setPreviewFullscreen(false)}
                width="100%"
                style={{ top: 0, paddingBottom: 0, maxWidth: '100vw' }}
                bodyStyle={{ height: 'calc(100vh - 110px)', padding: 0, overflow: 'auto' }}
                closable={false}
                title={
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
                        <Space>
                            <FileTextOutlined />
                            <span>Xem tr∆∞·ªõc h·ª£p ƒë·ªìng - To√†n m√†n h√¨nh</span>
                        </Space>
                        <Space>
                            <Button
                                type="primary"
                                icon={<DownloadOutlined />}
                                onClick={() => message.info('Ch·ª©c nƒÉng xu·∫•t PDF s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai sau')}
                            >
                                Xu·∫•t PDF
                            </Button>
                            <Button
                                icon={<PrinterOutlined />}
                                onClick={() => window.print()}
                            >
                                In ·∫•n
                            </Button>
                            <Button onClick={() => setPreviewFullscreen(false)}>
                                ƒê√≥ng
                            </Button>
                        </Space>
                    </div>
                }
                footer={null}
            >
                <ContractPreview tagsData={tagsData} isFullscreen={true} />
            </Modal>
        </div>
    );
};

export default TagsTab;